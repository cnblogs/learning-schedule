// <auto-generated />
using System;
using Cnblogs.Academy.Repositories;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Cnblogs.Academy.Repositories.Migrations
{
    [DbContext(typeof(AcademyContext))]
    [Migration("20190807023606_init")]
    partial class init
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.6-servicing-10079")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Cnblogs.Academy.Domain.Categories.Category", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTimeOffset>("DateAdded")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("SYSDATETIMEOFFSET()");

                    b.Property<bool>("Deleted");

                    b.Property<string>("Name")
                        .HasMaxLength(20);

                    b.Property<long>("ParentId");

                    b.HasKey("Id");

                    b.ToTable("Categories");
                });

            modelBuilder.Entity("Cnblogs.Academy.Domain.Schedules.Feedback", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Content")
                        .HasMaxLength(500);

                    b.Property<DateTimeOffset>("DateAdded")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("SYSDATETIMEOFFSET()");

                    b.Property<bool>("Deleted");

                    b.Property<int>("Difficulty");

                    b.Property<long>("ItemId");

                    b.Property<Guid>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("ItemId");

                    b.ToTable("Feedbacks");
                });

            modelBuilder.Entity("Cnblogs.Academy.Domain.Schedules.ItemDoneRecord", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CommentCount");

                    b.Property<string>("Content");

                    b.Property<bool>("Deleted");

                    b.Property<DateTimeOffset>("DoneTime")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("SYSDATETIMEOFFSET()");

                    b.Property<long>("ItemId");

                    b.Property<int>("LikeCount");

                    b.Property<int>("Status");

                    b.Property<Guid>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("ItemId");

                    b.ToTable("Records");
                });

            modelBuilder.Entity("Cnblogs.Academy.Domain.Schedules.Reference", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTimeOffset>("DateAdded")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("SYSDATETIMEOFFSET()");

                    b.Property<bool>("Deleted");

                    b.Property<long>("ItemId");

                    b.Property<string>("Url")
                        .HasMaxLength(500);

                    b.Property<Guid>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("ItemId");

                    b.ToTable("References");
                });

            modelBuilder.Entity("Cnblogs.Academy.Domain.Schedules.Schedule", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTimeOffset>("DateAdded")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("SYSDATETIMEOFFSET()");

                    b.Property<DateTimeOffset?>("DateEnd");

                    b.Property<DateTimeOffset>("DateUpdated")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("SYSDATETIMEOFFSET()");

                    b.Property<bool>("Deleted");

                    b.Property<string>("Description");

                    b.Property<int>("FollowingCount");

                    b.Property<bool>("IsPrivate");

                    b.Property<int>("Stage");

                    b.Property<int>("Status");

                    b.Property<byte[]>("Timestamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<string>("Title")
                        .IsRequired();

                    b.Property<Guid>("UserId");

                    b.HasKey("Id");

                    b.ToTable("Schedules");
                });

            modelBuilder.Entity("Cnblogs.Academy.Domain.Schedules.ScheduleFollowing", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTimeOffset>("DateAdded")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("SYSDATETIMEOFFSET()");

                    b.Property<bool>("Deleted");

                    b.Property<long>("ScheduleId");

                    b.Property<int>("Status");

                    b.Property<Guid>("UserId");

                    b.HasKey("Id");

                    b.HasAlternateKey("ScheduleId", "UserId");

                    b.ToTable("ScheduleFollowing");
                });

            modelBuilder.Entity("Cnblogs.Academy.Domain.Schedules.ScheduleItem", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTimeOffset>("DateAdded")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("SYSDATETIMEOFFSET()");

                    b.Property<DateTimeOffset?>("DateEnd");

                    b.Property<DateTimeOffset>("DateStart")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("SYSDATETIMEOFFSET()");

                    b.Property<bool>("Deleted");

                    b.Property<int>("DoneCount");

                    b.Property<long>("ScheduleId");

                    b.Property<int>("TextType");

                    b.Property<byte[]>("Timestamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<string>("Title");

                    b.Property<Guid>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("ScheduleId");

                    b.ToTable("ScheduleItems");
                });

            modelBuilder.Entity("Cnblogs.Academy.Domain.Schedules.ScheduleItemHtml", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Html");

                    b.Property<long>("ScheduleItemId");

                    b.HasKey("Id");

                    b.HasIndex("ScheduleItemId")
                        .IsUnique();

                    b.ToTable("ScheduleItemHtml");
                });

            modelBuilder.Entity("Cnblogs.Academy.Domain.Schedules.SchedulePrivateUpdateRecord", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTimeOffset>("DateAdded")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("SYSDATETIMEOFFSET()");

                    b.Property<bool>("IsPrivate");

                    b.Property<long>("ScheduleId");

                    b.HasKey("Id");

                    b.HasIndex("DateAdded");

                    b.HasIndex("ScheduleId");

                    b.ToTable("SchedulePrivateUpdateRecord");
                });

            modelBuilder.Entity("Cnblogs.Academy.Domain.Schedules.Subtask", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Content")
                        .HasMaxLength(500);

                    b.Property<DateTimeOffset>("DateAdded")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("SYSDATETIMEOFFSET()");

                    b.Property<DateTimeOffset?>("DateEnd");

                    b.Property<bool>("Deleted");

                    b.Property<long>("ItemId");

                    b.Property<long>("PreviousId");

                    b.Property<Guid>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("ItemId");

                    b.ToTable("Subtasks");
                });

            modelBuilder.Entity("Cnblogs.Academy.Domain.Schedules.Feedback", b =>
                {
                    b.HasOne("Cnblogs.Academy.Domain.Schedules.ScheduleItem", "Item")
                        .WithMany("Feedbacks")
                        .HasForeignKey("ItemId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Cnblogs.Academy.Domain.Schedules.ItemDoneRecord", b =>
                {
                    b.HasOne("Cnblogs.Academy.Domain.Schedules.ScheduleItem", "Item")
                        .WithMany("Records")
                        .HasForeignKey("ItemId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Cnblogs.Academy.Domain.Schedules.Reference", b =>
                {
                    b.HasOne("Cnblogs.Academy.Domain.Schedules.ScheduleItem", "Item")
                        .WithMany("References")
                        .HasForeignKey("ItemId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Cnblogs.Academy.Domain.Schedules.ScheduleFollowing", b =>
                {
                    b.HasOne("Cnblogs.Academy.Domain.Schedules.Schedule", "Schedule")
                        .WithMany("Following")
                        .HasForeignKey("ScheduleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Cnblogs.Academy.Domain.Schedules.ScheduleItem", b =>
                {
                    b.HasOne("Cnblogs.Academy.Domain.Schedules.Schedule", "Schedule")
                        .WithMany("Items")
                        .HasForeignKey("ScheduleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Cnblogs.Academy.Domain.Schedules.ScheduleItemHtml", b =>
                {
                    b.HasOne("Cnblogs.Academy.Domain.Schedules.ScheduleItem", "Item")
                        .WithOne("Html")
                        .HasForeignKey("Cnblogs.Academy.Domain.Schedules.ScheduleItemHtml", "ScheduleItemId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Cnblogs.Academy.Domain.Schedules.SchedulePrivateUpdateRecord", b =>
                {
                    b.HasOne("Cnblogs.Academy.Domain.Schedules.Schedule", "Schedule")
                        .WithMany("PrivateUpdateRecord")
                        .HasForeignKey("ScheduleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Cnblogs.Academy.Domain.Schedules.Subtask", b =>
                {
                    b.HasOne("Cnblogs.Academy.Domain.Schedules.ScheduleItem", "Item")
                        .WithMany("Subtasks")
                        .HasForeignKey("ItemId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
